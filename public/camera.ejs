<head>
    <meta charset="gbk" />
    <title>Student</title>
    <style>
        #user-list>li {
            font-size: 24px;
        }

        h1 {
            background: #5b6218;
            border-radius: 6px 6px 6px 6px;
            box-shadow: 0 0 0 1px #5F5A4B, 1px 1px 6px 1px rgba(10, 10, 0, 0.5);
            color: #ffffff;
            font-family: "Î¢ÈíÑÅºÚ", "ËÎÌå", "ºÚÌå", Arial;
            font-size: 18px;
            font-weight: bold;
            height: 25px;
            line-height: 25px;
            margin: 18px 0 !important;
            padding: 8px 0 5px 5px;
            text-shadow: 2px 2px 3px #222222;
        }

        button {
            background-color: rgb(24, 4, 95);
            color: white;
            width: 100px;
            height: 30px;
            border: 0;
            font-size: 16px;
            border-radius: 30px;
            margin-right: 50px;
        }
    </style>
</head>

<body>
    <h1 id="user-id">
        Hello! Student <%= msg.user.stu_no%>
    </h1>
    <ul id="user-list">
    </ul>
    <p>
        Camera-video:
        <input type="radio" id="cvyes" name="cameravideo" value="1">
        <label for="cvyes">yes</label>
        <input type="radio" id="cvno" name="cameravideo" value="0">
        <label for="cvno">no</label>
        <br>
        Camera-sound:
        <input type="radio" id="csyes" name="camerasound" value="1">
        <label for="csyes">yes</label>
        <input type="radio" id="csno" name="camerasound" value="0">
        <label for="csno">no</label>
        <br>
        Screen-video:
        <input type="radio" id="svyes" name="screenvideo" value="1">
        <label for="svyes">yes</label>
        <input type="radio" id="svno" name="screenvideo" value="0">
        <label for="svno">no</label>
        <br>
        Screen-sound:
        <input type="radio" id="ssyes" name="screensound" value="1">
        <label for="ssyes">yes</label>
        <input type="radio" id="ssno" name="screensound" value="0">
        <label for="ssno">no</label>
        <br>
    </p>
    <button type="button" name="begin" onclick="dataBegin()">Begin</button>
    <div><video id="video-local" controls autoplay></video></div>
    <div><video id="screen-local" controls autoplay></video></div>

    <div id="videos"></div>

    <script src="//cdn.bootcdn.net/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
    <script src="//cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"></script>
    <script>

        function dataBegin() {
            let cameravideo = document.getElementsByName('cameravideo')
            let camerasound = document.getElementsByName('camerasound')
            let screenvideo = document.getElementsByName('screenvideo')
            let screensound = document.getElementsByName('screensound')
            console.log(cameravideo)
            console.log(camerasound)
            console.log(screenvideo)
            console.log(screensound)
            if (cameravideo[0].checked) {
                InitCamera(camerasound[0].checked)
            }
            if (screenvideo[0].checked) {
                InitScreen(screensound[0].checked)
            }
        }

        function getUserMedia(constrains, success, error) {
            if (navigator.mediaDevices.getUserMedia) {
                promise = navigator.mediaDevices.getUserMedia(constrains).then(success).catch(error);
            } else if (navigator.webkitGetUserMedia) {
                promise = navigator.webkitGetUserMedia(constrains).then(success).catch(error);
            } else if (navigator.mozGetUserMedia) {
                promise = navagator.mozGetUserMedia(constrains).then(success).catch(error);
            } else if (navigator.getUserMedia) {
                promise = navigator.getUserMedia(constrains).then(success).catch(error);
            }
        }

        function MergeVideo(kind, stu_no) {
            console.log('in function merge')
            // document.getElementById('stu_no').value = stutable[parterName].stu_no
            // document.getElementById('kind').value = kind
            // document.getElementById('merge').submit()
            var formData = new FormData();
            formData.append("content", 'nothing');
            formData.append("stu_no", stu_no)
            formData.append("kind", kind)

            let xhr = new XMLHttpRequest
            // xhr.overrideMimeType("video/webm;charset=gb2312")
            xhr.open('post', '/mergeVideo')
            xhr.send(formData)
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        const data = JSON.parse(xhr.responseText)
                        console.log('success:', data)
                    } else {
                        console.log('fail save video')
                    }
                    formData = null
                }
            }
        }

        function getScreenMedia(constrains, success, error) {
            if (navigator.mediaDevices.getDisplayMedia)
                promise = navigator.mediaDevices.getDisplayMedia(constrains).then(success).catch(error);
        }

        function canGetUserMediaUse() {
            return (navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
        }

        function canGetDisplayMediaUse() {
            return (navigator && navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices);
        }

        const localVideoElm = document.getElementById("video-local");
        const localScreenElm = document.getElementById("screen-local");

        const iceServer = {
            iceServers: [{ urls: ["stun:ss-turn1.xirsys.com"] }, { username: "CEqIDkX5f51sbm7-pXxJVXePoMk_WB7w2J5eu0Bd00YpiONHlLHrwSb7hRMDDrqGAAAAAF_OT9V0dWR1d2Vi", credential: "446118be-38a4-11eb-9ece-0242ac140004", urls: ["turn:ss-turn1.xirsys.com:80?transport=udp", "turn:ss-turn1.xirsys.com:3478?transport=udp"] }]
        };

        //PeerConnection
        var pc = [];
        var localStream = null;
        var screenStream = null;

        var mediaRecorder = [];
        var recordChunks = [];
        var clientnum1 = [], clientnum2 = [];
        var numtable = [];
        var recordMediaType = 'video/webm;codecs=vp8,opus';
        var startTime = [];

        function InitCamera(a) {
            console.log(a)
            if (canGetUserMediaUse()) {
                getUserMedia({
                    video: {
                        frameRate: '<%= msg.conf.rate %>',
                        width: { min: 720, ideal: '<%= msg.conf.width %>' },
                        height: { min: 540, ideal: '<%= msg.conf.high %>' },
                        aspectRatio: 16 / 9
                    },
                    audio: a
                }, (stream) => {
                    localStream = stream;
                    localVideoElm.srcObject = stream;
                    $(localVideoElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
            } else {
                alert('not compatible');
            }
        }

        function InitScreen(a) {
            console.log(a)
	    /*if (canGetDisplayMediaUse()) {
		getDisplayMedia({
                    video: {mediaSource: 'screen', width: {exact:1920}, height: {exact:1080}},
                    audio: true
                }, (stream) => {
                    screenStream = stream;
                    localScreenElm.srcObject = stream;
                    $(localScreenElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
	    }
	    else */if (canGetUserMediaUse()) {
                getUserMedia({
                    video: {
                        mediaSource: 'screen',
                        width: { exact: 1920 },
                        height: { exact: 1080 },
                        frameRate: '<%= msg.conf.rate %>'
                    },
                    audio: a
                }, (stream) => {
                    screenStream = stream;
                    localScreenElm.srcObject = stream;
                    $(localScreenElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
            } else {
                alert('not compatible');
            }
        }

        function getSeekableBlob(inputBlob, num, kind, parterName, merge = false) {
            var formData = new FormData();
            formData.append("content", inputBlob);
            formData.append("stu_no", '<%= msg.user.stu_no %>')
            formData.append("stu_name", '<%= msg.user.stu_name %>')
            formData.append("kind", kind)

            console.log(formData.get("content"))

            let xhr = new XMLHttpRequest
            xhr.overrideMimeType("video/webm;charset=gb2312")
            xhr.open('post', '/saveVideo')

            xhr.send(formData)
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        const data = JSON.parse(xhr.responseText)
                        console.log('³É¹¦£º', data)
                        if (merge == true) {
                            MergeVideo(kind, '<%= msg.user.stu_no %>')
                        }
                    } else {
                        console.log('Ê§°Ü')
                    }
                }
            }
        }

        function StartRecord(stream, num) {
            // statenum[num] = 'start'
            let option = {
                mimeType: recordMediaType
            };
            mediaRecorder[num] = null
            mediaRecorder[num] = new MediaRecorder(stream, option);
            mediaRecorder[num].ignoreMutedMedia = true;
            console.log(num + 'recorder statred');
            recordChunks[num] = [];
            mediaRecorder[num].start(80);
            startTime[num] = null
            startTime[num] = new Date().getTime();

            mediaRecorder[num].ondataavailable = function (e) {
                recordChunks[num].push(e.data);
            }
        }

        function StopRecord(num, kind, parterName, merge = false) {
            // statenum[num] = 'stop'
            if (!mediaRecorder[num]) {
                console.log('stream ' + num + ' is not created!');
                return;
            }
            if (mediaRecorder[num].status == 'recording')
                mediaRecorder[num].stop();
            var duration = new Date().getTime() - startTime[num];
            console.log('recorder ' + num + ' stopped');

            console.log(recordChunks[num])
            const blob = new Blob(recordChunks[num], { type: recordMediaType });
            getSeekableBlob(blob, num, kind, parterName, merge);
        }

        function StartCall(parterName, createOffer) {

            pc[parterName] = new RTCPeerConnection(iceServer);
            console.log(localStream);
            console.log(screenStream);

            if (localStream) {

                localStream.getTracks().forEach((track) => {
                    pc[parterName].addTrack(track, localStream);//should trigger negotiationneeded event
                });

            }
            if (screenStream) {
                screenStream.getTracks().forEach((track) => {
                    pc[parterName].addTrack(track, screenStream);//should trigger negotiationneeded event
                });
            }
            if (!screenStream && !localStream) {
                //alert('no stream selected!')
                return
            }

            if (createOffer) {
                console.log('in createoffer')
                pc[parterName].onnegotiationneeded = () => {

                    pc[parterName].createOffer().then((offer) => {
                        return pc[parterName].setLocalDescription(offer);
                    }).then(() => {
                        socket.emit('sdp', {
                            type: 'video-offer',
                            description: pc[parterName].localDescription,
                            to: parterName,
                            sender: socket.id
                        });
                    })
                };
            }

            pc[parterName].onicecandidate = ({ candidate }) => {
                socket.emit('ice candidates', {
                    candidate: candidate,
                    to: parterName,
                    sender: socket.id
                });
            };

        }

        function StartSend(parterName) {
            console.log(parterName)
            console.log(localStream);
            console.log(screenStream);
            clientnum1[parterName] = 0;
            numtable[0] = {
                parterName: parterName,
                kind: 'video'
            };
            clientnum2[parterName] = 1;
            numtable[1] = {
                parterName: parterName,
                kind: 'screen'
            }
            if (localStream)
                StartRecord(localStream, 0);
            if (screenStream)
                StartRecord(screenStream, 1);
        }


        var socket = io();
        var reconnect = [];
        function SendReset() {
            console.log('send reset')
            socket.emit('reset')
        }
        socket.on('connect', () => {

            console.log('connect ' + socket.id);

            pc.push(socket.id);

            socket.emit('new user greet', {
                sender: socket.id,
                msg: { stu_no: '<%= msg.user.stu_no %>', stu_name: '<%= msg.user.stu_name %>' },
            });

            socket.on('server ready', (data) => {
                console.log(data);
                socket.emit('user ready', {
                    sender: socket.id,
                    msg: { stu_no: '<%= msg.user.stu_no %>', stu_name: '<%= msg.user.stu_name %>' },
                });
            });

            socket.on('user disconnected', (socket_id) => {
                console.log('disconnect : ' + socket_id);

                $('#user-list li[user-id="' + socket_id + '"]').remove();
            })

            socket.on('ok we connect', (data) => {
                console.log("receive server on", data.sender.id);
                StartCall(data.sender.id, true)
                console.log( '<%= msg.conf.disconnect %>' / 2)
                setInterval("SendReset()", '<%= msg.conf.disconnect %>' / 2)
            });

            socket.on('index need connect', (data) => {
                console.log("receive index connect");
                console.log(socket.id)
                let li = $('<li></li>').text(data.sender.no_id).attr('user-id', data.sender.no_id);
                $('#user-list').append(li);
                let button = $('<button class="call">Start Record</button>');
                button.appendTo(li);
                $(button).click(function () {
                    StartSend(data.sender.id);
                    //StartCall(data.sender.id, true)
                });
                button = $('<button class="end">End Record</button>');
                button.appendTo(li);
                $(button).click(function () {
                    StopRecord(clientnum1[data.sender.id], "video", data.sender.id, true);
                    StopRecord(clientnum2[data.sender.id], "screen", data.sender.id, true);
                    pc[data.sender.id].removeTrack(data.sender.id)
                    socket.emit('stop track send', socket.id)
                });
                // reconnect[data.sender.id] = true
                // }
                console.log('after index user ready')
                socket.emit('user ready', {
                    sender: socket.id,
                    msg: { stu_no: '<%= msg.user.stu_no %>', stu_name: '<%= msg.user.stu_name %>' },
                });
            });

            socket.on('sdp', (data) => {
                if (data.description.type === 'offer') {
                    StartCall(data.sender, false);
                    let desc = new RTCSessionDescription(data.description);
                    pc[data.sender].setRemoteDescription(desc).then(() => {

                        pc[data.sender].createAnswer().then((answer) => {
                            return pc[data.sender].setLocalDescription(answer);
                        }).then(() => {
                            socket.emit('sdp', {
                                type: 'video-answer',
                                description: pc[data.sender].localDescription,
                                to: data.sender,
                                sender: socket.id
                            });

                        }).catch();//catch error function empty

                    })
                } else if (data.description.type === 'answer') {
                    let desc = new RTCSessionDescription(data.description);
                    pc[data.sender].setRemoteDescription(desc);
                }
            })

            socket.on('ice candidates', (data) => {
                console.log('ice candidate: ' + data.candidate);
                if (data.candidate) {
                    var candidate = new RTCIceCandidate(data.candidate);
                    pc[data.sender].addIceCandidate(candidate).catch();//catch err function empty
                }
            })
        });


    </script>
</body>


</html>