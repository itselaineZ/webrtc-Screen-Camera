<head>
    <title>Camera</title>
    <style>
        #user-list>li {
            font-size: 24px;
        }
    </style>
</head>

<body>
    <h1 id="user-id"> <%= msg.stu_no %> </h1>
    <ul id="user-list">
    </ul>
    
    <div><video id="video-local" controls autoplay></video></div>
    <div><video id="screen-local" controls autoplay></video></div>

    <div id="videos"></div>

    <script src="//cdn.bootcdn.net/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
    <script src="//cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"></script>
    <script>
        function getUserMedia(constrains, success, error) {
            if (navigator.mediaDevices.getUserMedia) {
                promise = navigator.mediaDevices.getUserMedia(constrains).then(success).catch(error);
            } else if (navigator.webkitGetUserMedia) {
                promise = navigator.webkitGetUserMedia(constrains).then(success).catch(error);
            } else if (navigator.mozGetUserMedia) {
                promise = navagator.mozGetUserMedia(constrains).then(success).catch(error);
            } else if (navigator.getUserMedia) {
                promise = navigator.getUserMedia(constrains).then(success).catch(error);
            }
        }

	function getScreenMedia(constrains, success, error) {
	    if (navigator.mediaDevices.getDisplayMedia)
		promise = navigator.mediaDevices.getDisplayMedia(constrains).then(success).catch(error);
	}

        function canGetUserMediaUse() {
            return (navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
        }

	function canGetDisplayMediaUse() {
	    return (navigator && navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices);
	}

        const localVideoElm = document.getElementById("video-local");
	const localScreenElm = document.getElementById("screen-local");

        const iceServer = {
            iceServers: [{ urls: ["stun:ss-turn1.xirsys.com"] }, { username: "CEqIDkX5f51sbm7-pXxJVXePoMk_WB7w2J5eu0Bd00YpiONHlLHrwSb7hRMDDrqGAAAAAF_OT9V0dWR1d2Vi", credential: "446118be-38a4-11eb-9ece-0242ac140004", urls: ["turn:ss-turn1.xirsys.com:80?transport=udp", "turn:ss-turn1.xirsys.com:3478?transport=udp"] }]
        };

        //PeerConnection
        var pc = [];
        var localStream = null;
	var screenStream = null;

        function InitCamera() {

            if (canGetUserMediaUse()) {
                getUserMedia({
                    video: {frameRate: { min: 20 }, width: { min: 1280, ideal: 1920 }, height: { min: 720, ideal: 1080 }, aspectRatio: 16 / 9},
                    audio: true
                }, (stream) => {
                    localStream = stream;
                    localVideoElm.srcObject = stream;
                    $(localVideoElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
            } else {
                alert('not compatible');
            }
        }

	function InitScreen() {
	    /*if (canGetDisplayMediaUse()) {
		getDisplayMedia({
                    video: {mediaSource: 'screen', width: {exact:1920}, height: {exact:1080}},
                    audio: true
                }, (stream) => {
                    screenStream = stream;
                    localScreenElm.srcObject = stream;
                    $(localScreenElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
	    }
	    else */if (canGetUserMediaUse()) {
	    	getUserMedia({
		    video: {mediaSource: 'screen', width: {exact:1920}, height: {exact:1080}},
		    audio: true
		}, (stream) => {
		    screenStream = stream;
		    localScreenElm.srcObject = stream;
		    $(localScreenElm).width(800);
		}, (err) => {
		    console.log('getusermedia error', err.name, err.message);
		});
	    }else {
		alert('not compatible');
	    }
	}

        function StartCall(parterName, createOffer) {

            pc[parterName] = new RTCPeerConnection(iceServer);
	    console.log(localStream);
	    console.log(screenStream);

            if (localStream) {

                localStream.getTracks().forEach((track) => {
                    pc[parterName].addTrack(track, localStream);//should trigger negotiationneeded event
                });

            }else{
		InitCamera();
            }
	    if (screenStream) {
	    	screenStream.getTracks().forEach((track) => {
		    pc[parterName].addTrack(track, screenStream);//should trigger negotiationneeded event
		});	
	    }else{
		InitScreen();
	    }

            if (createOffer) {

                pc[parterName].onnegotiationneeded = () => {

                    pc[parterName].createOffer().then((offer) => {
                        return pc[parterName].setLocalDescription(offer);
                    }).then(() => {
                        socket.emit('sdp', {
                            type: 'video-offer',
                            description: pc[parterName].localDescription,
                            to: parterName,
                            sender: socket.id
                        });
                    })
                };
            }

            pc[parterName].onicecandidate = ({ candidate }) => {
                socket.emit('ice candidates', {
                    candidate: candidate,
                    to: parterName,
                    sender: socket.id
                });
            };
        }

        var socket = io();

        socket.on('connect', () => {
            InitCamera();
	    InitScreen();

            console.log('connect ' + socket.id);

            //$('#user-id').text(socket.id);

            pc.push(socket.id);

            socket.emit('new user greet', {
                sender: socket.id,
                msg: 'hello you!',
     	    });

            socket.on('need connect', (data) => {
                console.log(data);
            });

            socket.on('user disconnected', (socket_id) => {
                console.log('disconnect : ' + socket_id);

                $('#user-list li[user-id="' + socket_id + '"]').remove();
            })

            socket.on('ok we connect', (data) => {
                console.log(data);
		let li = $('<li></li>').text(data.sender).attr('user-id', data.sender);
                $('#user-list').append(li);
		let init = $('<button class="call">initial my screen</button>');
                init.appendTo(li);
		$(init).click(function() {
			InitScreen();
		});
		let button = $('<button class="call">connect</button>');
                button.appendTo(li);
                $(button).click(function () {
                        StartCall($(this).parent().attr('user-id'), true);
                });
            });

            socket.on('sdp', (data) => {
                if (data.description.type === 'offer') {
                    StartCall(data.sender, false);
                    let desc = new RTCSessionDescription(data.description);
                    pc[data.sender].setRemoteDescription(desc).then(() => {

                        pc[data.sender].createAnswer().then((answer) => {
                            return pc[data.sender].setLocalDescription(answer);
                        }).then(() => {
                            socket.emit('sdp', {
                                type: 'video-answer',
                                description: pc[data.sender].localDescription,
                                to: data.sender,
                                sender: socket.id
                            });

                        }).catch();//catch error function empty

                    })
                } else if (data.description.type === 'answer') {
                    let desc = new RTCSessionDescription(data.description);
                    pc[data.sender].setRemoteDescription(desc);
                }
            })

            socket.on('ice candidates', (data) => {
                console.log('ice candidate: ' + data.candidate);
                if (data.candidate) {
                    var candidate = new RTCIceCandidate(data.candidate);
                    pc[data.sender].addIceCandidate(candidate).catch();//catch err function empty
                }
            })


        });


    </script>
</body>


</html>
