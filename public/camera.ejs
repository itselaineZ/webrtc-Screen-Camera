<head>
    <title>Camera</title>
    <style>
        #user-list>li {
            font-size: 24px;
        }
    </style>
</head>

<body>
    <h1 id="user-id">
        <%= msg.user.stu_no %>
    </h1>
    <ul id="user-list">
    </ul>
    <p>
        Camera-video:
        <input type="radio" id="cvyes" name="cameravideo" value="1">
        <label for="cvyes">yes</label>
        <input type="radio" id="cvno" name="cameravideo" value="0">
        <label for="cvno">no</label>
        <br>
        Camera-sound:
        <input type="radio" id="csyes" name="camerasound" value="1">
        <label for="csyes">yes</label>
        <input type="radio" id="csno" name="camerasound" value="0">
        <label for="csno">no</label>
        <br>
        Screen-video:
        <input type="radio" id="svyes" name="screenvideo" value="1">
        <label for="svyes">yes</label>
        <input type="radio" id="svno" name="screenvideo" value="0">
        <label for="svno">no</label>
        <br>
        Screen-sound:
        <input type="radio" id="ssyes" name="screensound" value="1">
        <label for="ssyes">yes</label>
        <input type="radio" id="ssno" name="screensound" value="0">
        <label for="ssno">no</label>
        <br>
    </p>
    <button type="button" name="begin" onclick="dataBegin()">Begin</button>
    <div><video id="video-local" controls autoplay></video></div>
    <div><video id="screen-local" controls autoplay></video></div>

    <div id="videos"></div>

    <script src="//cdn.bootcdn.net/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
    <script src="//cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"></script>
    <script>
        function dataBegin() {
            let cameravideo = document.getElementsByName('cameravideo')
            let camerasound = document.getElementsByName('camerasound')
            let screenvideo = document.getElementsByName('screenvideo')
            let screensound = document.getElementsByName('screensound')
            console.log(cameravideo)
            console.log(camerasound)
            console.log(screenvideo)
            console.log(screensound)
            if (cameravideo[0].checked) {
                InitCamera(camerasound[0].checked)
            }
            if (screenvideo[0].checked) {
                InitScreen(screensound[0].checked)
            }
        }

        function getUserMedia(constrains, success, error) {
            if (navigator.mediaDevices.getUserMedia) {
                promise = navigator.mediaDevices.getUserMedia(constrains).then(success).catch(error);
            } else if (navigator.webkitGetUserMedia) {
                promise = navigator.webkitGetUserMedia(constrains).then(success).catch(error);
            } else if (navigator.mozGetUserMedia) {
                promise = navagator.mozGetUserMedia(constrains).then(success).catch(error);
            } else if (navigator.getUserMedia) {
                promise = navigator.getUserMedia(constrains).then(success).catch(error);
            }
        }

        function getScreenMedia(constrains, success, error) {
            if (navigator.mediaDevices.getDisplayMedia)
                promise = navigator.mediaDevices.getDisplayMedia(constrains).then(success).catch(error);
        }

        function canGetUserMediaUse() {
            return (navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
        }

        function canGetDisplayMediaUse() {
            return (navigator && navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices);
        }

        const localVideoElm = document.getElementById("video-local");
        const localScreenElm = document.getElementById("screen-local");

        const iceServer = {
            iceServers: [{ urls: ["stun:ss-turn1.xirsys.com"] }, { username: "CEqIDkX5f51sbm7-pXxJVXePoMk_WB7w2J5eu0Bd00YpiONHlLHrwSb7hRMDDrqGAAAAAF_OT9V0dWR1d2Vi", credential: "446118be-38a4-11eb-9ece-0242ac140004", urls: ["turn:ss-turn1.xirsys.com:80?transport=udp", "turn:ss-turn1.xirsys.com:3478?transport=udp"] }]
        };

        //PeerConnection
        var pc = [];
        var localStream = null;
        var screenStream = null;

        function InitCamera(a) {
            console.log(a)
            if (canGetUserMediaUse()) {
                getUserMedia({
                    video: {
                        frameRate: { min: '<%= msg.conf.rate %>' },
                        width: { min: 720, ideal: '<%= msg.conf.width %>' },
                        height: { min: 540, ideal: '<%= msg.conf.high %>' },
                        aspectRatio: 16 / 9
                    },
                    audio: a
                }, (stream) => {
                    localStream = stream;
                    localVideoElm.srcObject = stream;
                    $(localVideoElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
            } else {
                alert('not compatible');
            }
        }

        function InitScreen(a) {
            console.log(a)
	    /*if (canGetDisplayMediaUse()) {
		getDisplayMedia({
                    video: {mediaSource: 'screen', width: {exact:1920}, height: {exact:1080}},
                    audio: true
                }, (stream) => {
                    screenStream = stream;
                    localScreenElm.srcObject = stream;
                    $(localScreenElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
	    }
	    else */if (canGetUserMediaUse()) {
                getUserMedia({
                    video: {
                        mediaSource: 'screen',
                        width: { exact: 1920 },
                        height: { exact: 1080 }
                    },
                    audio: a
                }, (stream) => {
                    screenStream = stream;
                    localScreenElm.srcObject = stream;
                    $(localScreenElm).width(800);
                }, (err) => {
                    console.log('getusermedia error', err.name, err.message);
                });
            } else {
                alert('not compatible');
            }
        }

        function StartCall(parterName, createOffer) {

            pc[parterName] = new RTCPeerConnection(iceServer);
            console.log(localStream);
            console.log(screenStream);

            if (localStream) {

                localStream.getTracks().forEach((track) => {
                    pc[parterName].addTrack(track, localStream);//should trigger negotiationneeded event
                });

            } else {
                dataBegin()
            }
            if (screenStream) {
                screenStream.getTracks().forEach((track) => {
                    pc[parterName].addTrack(track, screenStream);//should trigger negotiationneeded event
                });
            } else {
                dataBegin()
            }

            console.log(localStream);
            console.log(screenStream);

            if (createOffer) {

                pc[parterName].onnegotiationneeded = () => {

                    pc[parterName].createOffer().then((offer) => {
                        return pc[parterName].setLocalDescription(offer);
                    }).then(() => {
                        socket.emit('sdp', {
                            type: 'video-offer',
                            description: pc[parterName].localDescription,
                            to: parterName,
                            sender: socket.id
                        });
                    })
                };
            }

            pc[parterName].onicecandidate = ({ candidate }) => {
                socket.emit('ice candidates', {
                    candidate: candidate,
                    to: parterName,
                    sender: socket.id
                });
            };
        }


        //getwebsocket()
        //function getwebsocket() {
        var socket = io();
        var reconnect = [];
        socket.on('connect', () => {

            console.log('connect ' + socket.id);

            pc.push(socket.id);

            socket.emit('new user greet', {
                sender: socket.id,
                msg: { stu_no: '<%= msg.user.stu_no %>', stu_name: '<%= msg.user.stu_name %>' },
            });

            socket.on('need connect', (data) => {
                console.log(data);
            });

            socket.on('user disconnected', (socket_id) => {
                console.log('disconnect : ' + socket_id);

                $('#user-list li[user-id="' + socket_id + '"]').remove();
            })

            socket.on('ok we connect', (data) => {
                console.log("receive ok we connect");
                if (reconnect[data.sender.id] == true) {
                    StartCall(data.sender.id, true);
                }
                else {
                    let li = $('<li></li>').text(data.sender.no_id).attr('user-id', data.sender.no_id);
                    $('#user-list').append(li);
                    let button = $('<button class="call">connect</button>');
                    button.appendTo(li);
                    $(button).click(function () {
                        StartCall(data.sender.id, true);
                    });
                    reconnect[data.sender.id] = true
                }
            });

            socket.on('sdp', (data) => {
                if (data.description.type === 'offer') {
                    StartCall(data.sender, false);
                    let desc = new RTCSessionDescription(data.description);
                    pc[data.sender].setRemoteDescription(desc).then(() => {

                        pc[data.sender].createAnswer().then((answer) => {
                            return pc[data.sender].setLocalDescription(answer);
                        }).then(() => {
                            socket.emit('sdp', {
                                type: 'video-answer',
                                description: pc[data.sender].localDescription,
                                to: data.sender,
                                sender: socket.id
                            });

                        }).catch();//catch error function empty

                    })
                } else if (data.description.type === 'answer') {
                    let desc = new RTCSessionDescription(data.description);
                    pc[data.sender].setRemoteDescription(desc);
                }
            })

            socket.on('ice candidates', (data) => {
                console.log('ice candidate: ' + data.candidate);
                if (data.candidate) {
                    var candidate = new RTCIceCandidate(data.candidate);
                    pc[data.sender].addIceCandidate(candidate).catch();//catch err function empty
                }
            })

            socket.on('heartbeat', (socket_id) => {
                if (socket_id == socket.id) {
                    console.log("receive heartbeat and send rest")
                    socket.emit("reset", socket.id)
                }

            })

            socket.on('close', (socket_id) => {
                if (socket_id == socket.id) {
                    console.log("reconnect")
                    reconnect = true
                    socket = io()
                }

            })
        });
            // socket.onclose = function (event) {
            //     console.log('websocket closed');
            //     reconnect();
            // };
        //}
        // function reconnect() {
        //     setTimeout(function () {
        //         socket = io()
        //     }, 1000);
        // }


    </script>
</body>


</html>