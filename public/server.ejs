<head>
    <meta charset="gbk">
    <title>Teacher</title>
    <style>
        #user-list>li {
            font-size: 24px;
        }

        table {
            width: 20%;
            border-collapse: collapse;
        }

        table caption {
            font-size: 2em;
            font-weight: bold;
            margin: 1em 0;
        }

        th,
        td {
            border: 1px solid #999;
            text-align: center;
            padding: 20px 0;
        }

        table thead tr {
            background-color: #008c8c;
            color: #fff;
        }

        table tbody tr:nth-child(odd) {
            background-color: #eee;
        }

        table tbody tr:hover {
            background-color: #ccc;
        }

        table tbody tr td:first-child {
            color: #f40;
        }

        table tfoot tr td {
            text-align: right;
            padding-right: 20px;
        }

        h1 {
            background: #2B6695;
            border-radius: 6px 6px 6px 6px;
            box-shadow: 0 0 0 1px #5F5A4B, 1px 1px 6px 1px rgba(10, 10, 0, 0.5);
            color: #FFFFFF;
            font-family: "Î¢ÈíÑÅºÚ", "ËÎÌå", "ºÚÌå", Arial;
            font-size: 18px;
            font-weight: bold;
            height: 25px;
            line-height: 25px;
            margin: 18px 0 !important;
            padding: 8px 0 5px 5px;
            text-shadow: 2px 2px 3px #222222;
        }

        .filter-box {
            width: 240px;
            height: 34px;
            background-color: #ffffff;
            border: solid 1px #dcdcdc;
            font-family: Roboto;
            font-size: 12px;
            font-weight: normal;
            font-style: normal;
            font-stretch: normal;
            letter-spacing: normal;
            text-align: left;
            color: #3d3d3d;
            padding-left: 10px;
            border-color: #dcdcdc;
            -webkit-appearance: none;
        }

        select {
            background-image: url(backdropdown.png);
            background-position: 222px 9px;
            font-family: Roboto;
            font-size: 12px;
            color: #3d3d3d;
            background-repeat: no-repeat;
        }
    </style>
    <div style="display:none">
        <form id="merge" action='https://118.195.242.229:80:80/mergeVideo'>
            <input display="none" id="stu_no" name='stu_no' />
            <input display="none" id="kind" name='kind' />
            <input display="none" id="sub" type="submit" value="submit" />
        </form>
    </div>

    <script type="javascript" src="/root/webrtc/fix-webm-duration.js"></script>
</head>

<body>
    <h1 id="user-id">
        Hello! Teacher <%= msg.user.stu_no %>
    </h1>
    <!-- <button type="button" name="get" onclick="GetState()">Get All Students' State</button> -->
    <table id="stulst" border="1" style="float:left">

        <thead>
            <tr>
                <th>stu_no</th>
                <th>stu_state</th>
            </tr>
        </thead>
        <tbody>
            <% for(var i=0; i < msg.stu.length; i++){ %>
                <tr id="stu<%= i %>" onclick="displaystu('<%= msg.stu[i].stu_no %>')">
                    <td>
                        <%= msg.stu[i].stu_no %>
                    </td>
                    <td id="stu<%= i %>_state">not init</td>
                </tr>
                <% } %>
        </tbody>
    </table>
    <br><br><br>
    <!-- <select class="filter-box" id="stuselect" onChange="displaystu()" style="float:left">
        <option selected="selected">change student <b class="caret"></b></option>
        <% for(var i=0; i < msg.stu.length; i++){ %>
            <option>
                <%= msg.stu[i].stu_no %>
            </option>
            <% } %>
    </select> -->

    <div id="videos"></div>

    <script src="//cdn.bootcdn.net/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
    <script src="//cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"></script>
    <script type="javascript" src="/root/webrtc/fix-webm-duration.js"></script>
    <script src="https://unpkg.com/@ffmpeg/ffmpeg@0.9.5/dist/ffmpeg.min.js"></script>
    <script src="https://www.webrtc-experiment.com/EBML.js"></script>
    <script>
        const { createFFmpeg, fetchFile } = FFmpeg;
        const ffmpeg = createFFmpeg({ log: true });
        //PeerConnection
        var pc = [];
        var num = 0;
        var mediaRecorder = [];
        var recordChunks = [];
        var clientnum1 = [], clientnum2 = [];
        var numtable = [];
        var recordMediaType = 'video/webm;codecs=vp8,opus';
        var startTime = [];
        var stutable = [];
        var restutable = [];
        var stuonline = [], stuontrack = [];
        var aimChunks
        var statenum = [];
        // function displaystu() {
        //     var sel = document.getElementById('stuselect')
        //     var index = sel.selectedIndex
        //     var no = sel.options[index].text

        //     for (let i = 0; i < num; ++i) {
        //         document.getElementById(i + '-div').style.display = 'none'
        //         document.getElementById(i + '-video').muted = 'true'
        //     }
        //     console.log(clientnum1[restutable[no]])
        //     console.log(clientnum2[restutable[no]])
        //     document.getElementById(clientnum1[restutable[no]] + '-div').style.display = 'block'
        //     document.getElementById(clientnum2[restutable[no]] + '-div').style.display = 'block'
        // }

        function sortstu() {
            var elmtable = document.getElementById('stulst')
            var elmtbody = elmtable.tBodies[0]
            elmtable.removeChild(elmtbody)
            elmtbody = document.createElement('tbody')
            '<% for (var i = 0; i < msg.stu.length; i++){ %>'
            if (stuontrack['<%= msg.stu[i].stu_no %>']) {
                var newtr = document.createElement('tr')
                newtr.id = "stu<%= i %>"
                newtr.onclick = function () { displaystu('<%= msg.stu[i].stu_no %>') }
                var newtd0 = document.createElement('td')
                newtd0.innerHTML = '<%= msg.stu[i].stu_no %>'
                var newtd1 = document.createElement('td')
                newtd1.id = "stu<%= i %>_state"
                newtd1.innerHTML = 'ontrack'
                newtr.appendChild(newtd0)
                newtr.appendChild(newtd1)
                elmtbody.appendChild(newtr)
            }
            '<% } %>'
            '<% for (var i = 0; i < msg.stu.length; i++) {%>'
            if (!stuontrack['<%= msg.stu[i].stu_no %>'] && stuonline['<%= msg.stu[i].stu_no %>']) {
                var newtr = document.createElement('tr')
                newtr.id = "stu<%= i %>"
                newtr.onclick = function () { displaystu('<%= msg.stu[i].stu_no %>') }
                var newtd0 = document.createElement('td')
                newtd0.innerHTML = '<%= msg.stu[i].stu_no %>'
                var newtd1 = document.createElement('td')
                newtd1.id = "stu<%= i %>_state"
                newtd1.innerHTML = 'online'
                newtr.appendChild(newtd0)
                newtr.appendChild(newtd1)
                elmtbody.appendChild(newtr)
            }
            '<% } %>'
            '<% for (var i = 0; i < msg.stu.length; i++){ %>'
            if (!stuontrack['<%= msg.stu[i].stu_no %>'] && !stuonline['<%= msg.stu[i].stu_no %>']) {
                var newtr = document.createElement('tr')
                newtr.id = "stu<%= i %>"
                newtr.onclick = function () { displaystu('<%= msg.stu[i].stu_no %>') }
                var newtd0 = document.createElement('td')
                newtd0.innerHTML = '<%= msg.stu[i].stu_no %>'
                var newtd1 = document.createElement('td')
                newtd1.id = "stu<%= i %>_state"
                newtd1.innerHTML = 'not online'
                newtr.appendChild(newtd0)
                newtr.appendChild(newtd1)
                elmtbody.appendChild(newtr)
            }
            '<% } %>'
            elmtable.appendChild(elmtbody)
        }

        function displaystu(stu_no) {
            // for (let i = 0; i < num; ++i) {
            //     document.getElementById(i + '-div').style.display = 'none'
            //     document.getElementById(i + '-video').muted = 'true'
            // }
            console.log(clientnum1[restutable[stu_no]])
            console.log(clientnum2[restutable[stu_no]])
            console.log()
            if (stuonline[stu_no] == true) {
                if (!document.getElementById(clientnum1[restutable[stu_no]] + '-div')) {
                    //alert('The student has not started recording'+stu_no)
                }
                else {
                    if (clientnum1[restutable[stu_no]]) {
                        if (document.getElementById(clientnum1[restutable[stu_no]] + '-div').style.display == 'block') {
                            document.getElementById(clientnum1[restutable[stu_no]] + '-div').style.display = 'none'
                        }
                        else {
                            document.getElementById(clientnum1[restutable[stu_no]] + '-div').style.display = 'block'
                        }
                    }
                    if (clientnum2[restutable[stu_no]]) {
                        if (document.getElementById(clientnum2[restutable[stu_no]] + '-div').style.display == 'block') {
                            document.getElementById(clientnum2[restutable[stu_no]] + '-div').style.display = 'none'
                        }
                        else {
                            document.getElementById(clientnum2[restutable[stu_no]] + '-div').style.display = 'block'
                        }
                    }
                }
            }

        }

        function GetState() {
            '<% for(var i=0; i < msg.stu.length; i++){ %>'
            if (stuonline['<%= msg.stu[i].stu_no %>'] == true) {
                if (stuontrack['<%= msg.stu[i].stu_no %>'])
                    document.getElementById('stu' + '<%= i %>' + '_state').innerHTML = 'ontrack'
                else
                    document.getElementById('stu' + '<%= i %>' + '_state').innerHTML = 'online'
            } else {
                document.getElementById('stu' + '<%= i %>' + '_state').innerHTML = 'not online'
            }
            '<% } %>'
        }

        const iceServer = {
            iceServers: [{ urls: ["stun:ss-turn1.xirsys.com"] }, { username: "CEqIDkX5f51sbm7-pXxJVXePoMk_WB7w2J5eu0Bd00YpiONHlLHrwSb7hRMDDrqGAAAAAF_OT9V0dWR1d2Vi", credential: "446118be-38a4-11eb-9ece-0242ac140004", urls: ["turn:ss-turn1.xirsys.com:80?transport=udp", "turn:ss-turn1.xirsys.com:3478?transport=udp"] }]
        };

        window.onload = function () {
            //var ysFixWebmDuration = ysFixWebmDuration;
            //setInterval("GetState()", 500)
            setInterval("sortstu()", 500)

            function StartCall(parterName, createOffer) {

                pc[parterName] = null

                pc[parterName] = new RTCPeerConnection(iceServer);

                pc[parterName].onicecandidate = ({ candidate }) => {
                    socket.emit('ice candidates', {
                        candidate: candidate,
                        to: parterName,
                        sender: socket.id
                    });
                };

                pc[parterName].ontrack = (ev) => {
                    console.log(ev);
                    let str = ev.streams[0];

                    if (document.getElementById(`${num}-video`)) {
                        document.getElementById(`${num}-video`).srcObject = str;
                    } else {
                        let newDiv = document.createElement('div');
                        newDiv.id = `${num}-div`;
                        newDiv.style.width = 450;
                        newDiv.style.height = 350
                        newDiv.style.float = "left";
                        document.getElementById('videos').appendChild(newDiv);

                        let newP = document.createElement('div');
                        newP.id = `${num}-divp`;
                        newP.style.width = 450;
                        newP.innerHTML = stutable[parterName].stu_no;
                        document.getElementById(`${num}-div`).appendChild(newP);

                        let newVideo = document.createElement('video');
                        newVideo.id = `${num}-video`;
                        newVideo.autoplay = true;
                        newVideo.controls = true;
                        newVideo.srcObject = str;
                        newVideo.width = 450;
                        newVideo.muted = 'true';
                        if (clientnum1[parterName] == undefined) {
                            clientnum1[parterName] = num;
                            numtable[num] = {
                                parterName: parterName,
                                kind: 'video'
                            };
                        }
                        else {
                            clientnum2[parterName] = num;
                            numtable[num] = {
                                parterName: parterName,
                                kind: 'screen'
                            }
                        }
                        document.getElementById(`${num}-div`).appendChild(newVideo);
                        document.getElementById(`${num}-div`).style.display = 'none'
                        console.log(`hide ${num}-div`)
                        stuontrack[stutable[parterName].stu_no] = true;
                    }
                    num++;
                }
            }

            var socket = io();
            var heartCheck = []
            socket.on('connect', () => {

                console.log('connect ' + socket.id);

                pc.push(socket.id);

                socket.emit('server on', socket.id);

                socket.on('need connect', (data) => {
                    var onecheck = {
                        timeout: '<%= msg.conf.disconnect %>', //15Ãë£¬Õë¶Ô²»Í¬ÏîÄ¿ÉèÖÃ²»Í¬Ê±¼ä
                        timeoutObj: null,
                        socket_id: data.sender,
                        isfirst: true,
                        reset: function () {
                            clearTimeout(this.timeoutObj);
                            return this;
                        },
                        start: function () {
                            var self = this;
                            this.timeoutObj = setTimeout(function () {
                                if (self.isfirst == false) {
                                    stuonline[stutable[self.socket_id].stu_no] = false;
                                }
                                else {
                                    self.isfirst = false
                                }
                            }, self.timeout)
                        }
                    }
                    onecheck.start()
                    heartCheck[data.sender] = onecheck
                    stutable[data.sender] = data.msg;
                    stuonline[data.msg.stu_no.toString()] = true;
                    console.log(data.msg)
                    restutable[data.msg.stu_no] = data.sender;
                    console.log(restutable[data.msg.stu_no])
                    socket.emit('ok we connect', { receiver: data.sender, sender: { id: socket.id, no_id: '<%= msg.user.stu_no%>' } });
                    //sortstu();
                });

                socket.on('user disconnected', (socket_id) => {
                    console.log('disconnect : ' + socket_id);
                    stuonline[stutable[socket_id].stu_no] = false;
                    stuontrack[stutable[socket_id].stu_no] = false;
                    //sortstu();
                })

                socket.on('user reset', (socket_id) => {
                    if (heartCheck[socket_id]) {
                        heartCheck[socket_id].reset()
                    }
                })

                socket.on('stop track send', (socket_id) => {
                    stuontrack[stutable[socket_id].stu_no] = false
                    //sortstu();
                })

                // socket.on('index need connect', (data) => {
                //     console.log('early server on')
                //     socket.emit('server on', socket.id)
                // })

                socket.on('sdp', (data) => {
                    console.log('sdp in')
                    if (data.description.type === 'offer') {
                        StartCall(data.sender, false);
                        let desc = new RTCSessionDescription(data.description);
                        pc[data.sender].setRemoteDescription(desc).then(() => {

                            pc[data.sender].createAnswer().then((answer) => {
                                return pc[data.sender].setLocalDescription(answer);
                            }).then(() => {
                                socket.emit('sdp', {
                                    type: 'video-answer',
                                    description: pc[data.sender].localDescription,
                                    to: data.sender,
                                    sender: socket.id
                                });

                            }).catch();//catch error function empty

                        })
                    } else if (data.description.type === 'answer') {
                        let desc = new RTCSessionDescription(data.description);
                        pc[data.sender].setRemoteDescription(desc);
                    }
                })

                socket.on('ice candidates', (data) => {
                    console.log('ice candidate: ' + data.candidate);
                    if (data.candidate) {
                        var candidate = new RTCIceCandidate(data.candidate);
                        pc[data.sender].addIceCandidate(candidate).catch();//catch err function empty
                    }
                })


            });
        }


    </script>
</body>


</html>